---
import Layout from "../layouts/Layout.astro";
import Section from "../components/Section.astro";
import Table from "../components/Table.astro";
---

<Layout title="Creative Budget Planner">
  <main>
    <h1>Expense Tracker</h1>
    <div class="container">
      <Section title="Income">
        <form id="income-form">
          <div class="input-group">
            <label for="income-description">Description</label>
            <input
              type="text"
              id="income-description"
              placeholder="e.g. Salary"
            />
          </div>
          <div class="input-group">
            <label for="income-amount">Amount ($)</label>
            <input type="number" id="income-amount" placeholder="e.g. 1000" />
          </div>
          <div class="button-group">
            <button>Add Income</button>
          </div>
        </form>
      </Section>
      <Section title="Expenses">
        <form id="expense-form">
          <div class="input-group">
            <label for="expense-description">Description</label>
            <input
              type="text"
              id="expense-description"
              placeholder="e.g. Rent"
            />
          </div>
          <div class="input-group">
            <label for="expense-category">Category</label>
            <select id="expense-category">
              <option value="Housing">Housing</option>
              <option value="Food">Food</option>
              <option value="Transportation">Transportation</option>
              <option value="Entertainment">Entertainment</option>
              <option value="Others">Others</option>
            </select>
          </div>
          <div class="input-group">
            <label for="expense-amount">Amount ($)</label>
            <input type="number" id="expense-amount" placeholder="e.g. 500" />
          </div>
          <div class="button-group">
            <button>Add Expense</button>
          </div>
        </form>
      </Section>
    </div>
    <Table />
    <div class="clear-button-group">
      <button id="clear-all">Clear All</button>
    </div>
  </main>
</Layout>

<script>
  type TransactionType = "Income" | "Expense";

  const clearAllButton = document.getElementById("clear-all");

  clearAllButton?.addEventListener("click", (evt) => {
    clearInputs();

    const deleteButtons = document.getElementsByClassName("delete-btn");

    for (let i = 1; i <= deleteButtons.length; i++) {
      const deleteButton = deleteButtons[i] as HTMLButtonElement;

      deleteButton.click();
    }

    updateSummary();
  });

  const expenseForm = document.getElementById("expense-form");
  const incomeForm = document.getElementById("income-form");
  const expenseDescription = document.getElementById(
    "expense-description",
  ) as HTMLInputElement;
  const incomeDescription = document.getElementById(
    "income-description",
  ) as HTMLInputElement;
  const expenseAmount = document.getElementById(
    "expense-amount",
  ) as HTMLInputElement;
  const incomeAmount = document.getElementById(
    "income-amount",
  ) as HTMLInputElement;
  const expenseCategory = document.getElementById(
    "expense-category",
  ) as HTMLSelectElement;
  const transactionHistory = document.getElementById("transaction-history");
  const totalExpense = document.getElementById("total-expenses");
  const totalIncome = document.getElementById("total-income");
  const balance = document.getElementById("balance");

  function checkInputs(description: string, amount: number) {
    if (description === "" || isNaN(amount) || amount <= 0) {
      alert("Please enter a valid expense description and amount.");

      return;
    }
  }

  expenseForm?.addEventListener("submit", (evt) => {
    evt.preventDefault();

    const description = expenseDescription.value.trim();
    const amount = Number(expenseAmount.value.trim());
    const category = expenseCategory.value;

    checkInputs(description, amount);

    addTransaction(description, amount, "Expense", category);
    updateSummary();
    clearInputs();
  });

  incomeForm?.addEventListener("submit", (evt) => {
    evt.preventDefault();

    const description = incomeDescription.value.trim();
    const amount = +incomeAmount.value.trim();

    checkInputs(description, amount);

    addTransaction(description, amount, "Income");
    updateSummary();
    clearInputs();
  });

  function addTransaction(
    description: string,
    amount: number,
    type: TransactionType,
    categoty?: string,
  ) {
    const transactionRow = document.createElement("tr");

    transactionRow.innerHTML = `
      <td>${description}</td>
      <td>${categoty ? categoty : ""}</td>
      <td>${amount.toFixed(2)}</td>
      <td>${type}</td>
      <td><button class='delete-btn'>Delete</button></td>
    `;

    transactionHistory?.appendChild(transactionRow);

    transactionRow
      .querySelector(".delete-btn")
      ?.addEventListener("click", () => {
        transactionRow.remove();

        updateSummary();
      });
  }

  function updateSummary() {
    let totalExpenses = 0,
      totalIncomes = 0;

    const transactions = transactionHistory?.querySelectorAll("tr");

    if (transactions && transactions.length > 0) {
      transactions.forEach((transaction) => {
        const amountText = transaction.children[2].textContent;
        if (amountText) {
          const amount = parseFloat(amountText);
          const type = transaction?.children[3].textContent;

          if (type === "Expense") {
            totalExpenses += amount;
          } else {
            totalIncomes += amount;
          }
        }
      });
    }

    if (totalExpense) {
      totalExpense.textContent = totalExpenses.toFixed(2);
    }
    if (totalIncome) {
      totalIncome.textContent = totalIncomes.toFixed(2);
    }
    if (balance) {
      balance.textContent = (totalIncomes + totalExpenses).toFixed(2);
    }
  }

  function clearInputs() {
    expenseDescription.value = "";
    expenseAmount.value = "";
    expenseCategory.value = "Housing";

    incomeAmount.value = "";
    incomeDescription.value = "";
  }
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    font-size: 20px;
    line-height: 1.6;
  }

  h1,
  h2 {
    color: #333;
    text-align: center;
  }

  h1 {
    margin-bottom: 1.5rem;
  }

  h2 {
    margin-bottom: 1rem;
  }

  .container {
    background-color: white;
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    max-width: 600px;
    width: 100%;
  }

  .input-group {
    margin-bottom: 1rem;

    label {
      display: block;
      margin-bottom: 0.25rem;
      color: #555;
    }

    input,
    select {
      width: calc(100% - 1rem);
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 5px;
      box-sizing: border-box;
      font-size: 1rem;
    }
  }

  .button-group button,
  .clear-button-group button {
    background-color: #ff69b4;
    color: white;
    border: none;
    padding: 0.5rem 1.5rem;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
  }

  .button-group button:hover,
  .clear-button-group button:hover {
    background-color: #ff1493;
  }
</style>
